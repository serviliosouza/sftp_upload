(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "rxjs"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UploaderRunner = void 0;
    const tslib_1 = require("tslib");
    const rxjs_1 = require("rxjs");
    class UploaderRunner {
        constructor() {
            this.uploaderMap = new Map();
        }
        register(name, uploader) {
            this.uploaderMap.set(name, uploader);
            rxjs_1.fromEvent(uploader, 'upload:destroy').subscribe(() => this.unregister(name));
        }
        unregister(name) {
            this.uploaderMap.delete(name);
        }
        start() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    for (const [, uploader] of this.uploaderMap) {
                        yield uploader.connect();
                        yield uploader.startUpload();
                    }
                }
                catch (e) {
                    throw new Error(e);
                }
            });
        }
    }
    exports.UploaderRunner = UploaderRunner;
});
