(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "rxjs", "./ftp_uploader", "./sftp_uploader", "./uploader_runner"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.run = void 0;
    const rxjs_1 = require("rxjs");
    const ftp_uploader_1 = require("./ftp_uploader");
    const sftp_uploader_1 = require("./sftp_uploader");
    const uploader_runner_1 = require("./uploader_runner");
    const uploadFactory = (constructor, options) => {
        const upload = new constructor(options);
        let successFileCount = 0;
        rxjs_1.fromEvent(upload, 'upload:start').subscribe(([, files]) => console.log(`${files.length} files waiting to be uploaded`));
        rxjs_1.fromEvent(upload, 'upload:file').subscribe(() => ++successFileCount);
        rxjs_1.fromEvent(upload, 'upload:failure').subscribe(() => upload.destory());
        rxjs_1.fromEvent(upload, 'upload:success').subscribe(() => {
            console.log(`${successFileCount} files uploaded successfully`);
            upload.destory();
        });
        return upload;
    };
    exports.run = (config) => {
        const uploaderRunner = new uploader_runner_1.UploaderRunner();
        if (config.ftp) {
            uploaderRunner.register('ftp', uploadFactory(ftp_uploader_1.FtpUploader, config.ftp));
        }
        if (config.sftp) {
            uploaderRunner.register('sftp', uploadFactory(sftp_uploader_1.SftpUploader, config.sftp));
        }
        return uploaderRunner.start().catch((e) => {
            throw new Error(e);
        });
    };
});
