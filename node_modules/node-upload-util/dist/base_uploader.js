(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "events"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseUploader = void 0;
    const events_1 = require("events");
    const showOverrideTips = (method, namespace = 'Uploader') => {
        throw new Error(`[${namespace}] Method: ${method} should be override`);
    };
    class BaseUploader extends events_1.EventEmitter {
        constructor(options) {
            super();
            this.destoryed = false;
            this.initOptions(options);
        }
        initOptions(options) {
            this.options = options;
        }
        connect() {
            showOverrideTips('connect');
        }
        onReady() {
            console.log('[Uploader] connect ready.');
            this.emit('upload:ready');
        }
        startUpload() {
            showOverrideTips('startUpload');
        }
        onStart(files) {
            console.log('[Uploader] start.');
            this.emit('upload:start', this.options, files);
        }
        onFileUpload(filePath, files) {
            console.log(`[Uploader] file: ${filePath} upload successfully \n`);
            this.emit('upload:file', this.options, files, filePath);
        }
        onSuccess(files) {
            console.log(`[Uploader] all files uploaded successfully \n`);
            this.emit('upload:success', this.options, files);
        }
        onFailure(e) {
            console.error('[Uploader] file upload error.', e);
            this.emit('upload:failure', this.options, e);
        }
        onDestoryed() {
            console.log('[Uploader] destory connect.');
            this.emit('upload:destroy');
        }
        destory() {
            if (!this.destoryed) {
                this.options = null;
                this.removeAllListeners();
                this.onDestoryed();
                this.destoryed = true;
            }
        }
    }
    exports.BaseUploader = BaseUploader;
});
